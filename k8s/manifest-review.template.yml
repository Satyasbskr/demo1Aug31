apiVersion: apps/v1
kind: Deployment
metadata:
  name: spring-boot-webapp-${NAME}-deployment
spec:
  selector:
    matchLabels:
      app: spring-boot-webapp-${NAME}
  replicas: 1 # tells deployment to run 1 pod matching the template
  template:
    metadata:
      labels:
        app: spring-boot-webapp-${NAME}
    spec:
      containers:
      - name: spring-boot-webapp
        image: docker-dev.registry.kroger.com/tools/spring-boot-webapp:latest
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "128Mi"
            cpu: "500m"
        env:
        - name: CONFIG_VAR
          value: config_value
        - name: SECRET_VAR
          valueFrom:
            secretKeyRef:
              name: spring-boot-webapp-${NAME}-secret
              key: application-secret
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: spring-boot-webapp-${NAME}-frontend
  labels:
    app: spring-boot-webapp-${NAME}
spec:
  ports:
    # the port that this service should serve on
    - port: 80
      #targetPort: 80
  selector:
    app: spring-boot-webapp-${NAME}
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: spring-boot-webapp-${NAME}-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/server-alias: spring-boot-webapp-${NAME}.kroger.com
spec:
  tls:
    - hosts:
      #hostname of your application
      - spring-boot-webapp-${NAME}.tooling.rch-${DATACENTER}-cxnonprod.kroger.com
      #certificate secret (created by provisioning)
      secretName: star-tooling-${DATACENTER}cxnonprod
  rules:
    - host: spring-boot-webapp-${NAME}.tooling.rch-${DATACENTER}-cxnonprod.kroger.com
      http:
        paths:
        - path: /
          backend:
            # This assumes http-svc exists and routes to healthy endpoints
            serviceName: spring-boot-webapp-${NAME}-frontend
            servicePort: 80